{"version":3,"sources":["index.js"],"names":["boardRows","i","push","className","Square","props","winningLine","onClick","style","includes","backgroundColor","value","prevMove","console","log","Board","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd883dd9.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst numBoardRows = 3;\nconst numBoardColumns = 3;\n\nvar boardRows = [];\nvar boardColumns = [];\n\nfor (var i = 0; i < numBoardRows; i++) {\n    boardRows.push(<div className=\"board-row\" />);\n}\n\nconsole.log(boardRows)\n\nfunction Square(props) {\n\n  const prevMoveStyle = {\n    backgroundColor: '#DCDCDC',\n  };\n  const winningLineStyle = {\n    backgroundColor: '#00FF00'      \n  }\n  // If the winning move has been found\n  if (props.winningLine) {\n    return(\n      <button className=\"square\" \n        onClick={props.onClick} \n        style={props.winningLine.includes(props.i) ? winningLineStyle : null } \n      >\n        {props.value}\n      </button>\n    );\n  } else {\n    return (\n      <button className=\"square\" onClick={props.onClick} style={props.prevMove ? prevMoveStyle : null} >\n        {props.value}\n      </button>\n    );\n  }\n}\n\nclass Board extends React.Component {\n\n  renderSquare(i) {\n    return (\n      <Square \n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        prevMove={(i === this.props.prevMove) ? true : false}\n        winningLine={this.props.winningLine}\n        i={i}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>      \n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n          history: [\n            {\n              squares: Array(9).fill(null),\n           }\n          ],\n          stepNumber: 0,\n          xIsNext: true,\n          prevMove: null,\n          winningLine: null,\n      };\n  }\n\n  handleClick(i) {\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\n      const current = history[history.length - 1];\n      const squares = current.squares.slice();\n      if (calculateWinner(squares) || squares[i] || this.state.stepNumber >= 9) {\n          return;\n      }\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\n      this.setState({\n          history: history.concat([{\n              squares: squares,\n          }]),\n          stepNumber: history.length,\n          xIsNext: !this.state.xIsNext,\n          prevMove: i,\n      });\n  }\n\n  jumpTo(step) {\n      this.setState({\n          stepNumber: step,\n          xIsNext: (step % 2) === 0,\n      });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    var winningLine = null;\n\n    const moves = history.map((step, move) => {\n        const desc = move ? \n            'Go to move #' + move : \n            'Go to game start';\n        return (\n            <li key={move}>\n                <button onClick={() => this.jumpTo(move)}>{desc}</button>\n            </li>\n        );\n    });\n\n    let status;\n    // If a winner has been found\n    if (winner) {\n        status = 'Winner: ' + winner[0];\n        winningLine = winner[1];\n    } \n    // If it's a draw\n    else if (this.state.stepNumber >= 9){\n        status = 'Draw!';\n    }\n    // Otherwise, play on!\n    else {\n        status = 'Next Player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            stepNumber={this.state.stepNumber}\n            prevMove={this.state.prevMove}\n            winningLine={winningLine}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return [squares[a], lines[i]];\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}